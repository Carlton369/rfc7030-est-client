Library and client implementation of EST Enrollment Protocol RFC 7030 
https://www.rfc-editor.org/rfc/rfc7030.html


Summary
-------
1. Why another EST Client
2. EST Endpoints
3. Build
    3.1. Linux/MacOS
    3.2. Windows
4. Custom TLS/X.509 Backend
    4.1. Function map
    4.2. Example
5. Usage
    5.1. Client
    5.2. Library
    5.3. Custom library


1. Why another EST Client
-------------------------
Actually, the standard reference implementation https://github.com/cisco/libest
is very complex (Android support, BRSKI support, ...).
Another problem with libest is the OpenSSL library used to implements 
all crypto capabilities because is the only supported library and the 
references are scattered in the code so is't easy to port to another library.

In the IoT world, we have devices with different SSL libraries (e.g. WolfSSL, BoringSSL, MbedTLS...) 
or different platforms that needs non-standard compilation methods or build chainsd 
(e.g. FreeRTOS and some market PLCs).

To support different platforms and libraries we need a 'pluggable' and configurable client.


2. EST Endpoints
----------------
    /cacerts            IMPLEMENTED
    /simpleenroll       IMPLEMENTED
    /simplereenroll     IMPLEMENTED
    /fullcmc            NOT IMPLEMENTED
    /csrattrs           NOT IMPLEMENTED


3. Build
--------
Compile Dependencies:
- picohttpparser
- munit (test only)
- cargs (cli client only)

** Note: all dependencies are downloaded automatically using git submodules.

Current cmake build configuration provides some default arguments you can on/off 
as you wish:
- BUILD_CLONE_SUBMODULES=ON             set to off to avoid close third parts compile 
                                        dependencies.
- USE_OPENSSL=ON                        current default TLS/X.509 backend implementation.
- USE_OPENSSL_CUSTOM_ROOT=OFF           enable the variable USE_OPENSSL_CUSTOM_ROOT_PATH
- USE_OPENSSL_CUSTOM_ROOT_PATH=""       enabled using USE_OPENSSL_CUSTOM_ROOT=ON, 
                                        sets the path used to find the openssl root dir.

3.1. Linux/MacOS
----------------
- Setup cmake artifacts:
  If you want to change the build output directory update the -B flag.

    cmake -Ssrc -Bbuild

- Compile the code:
    
    cd build
    make

    ** Note: at the end you will find the artifact build/rfc7030-est-client 

- Run unit tests:
    
    ./bin/rfc7030-est-client-tests

- Run integration tests:

    ./bin/rfc7030-est-integration-tests


4. Custom TLS/X.509 Backend
---------------------------
As described in the general description, this EST implementation is agnostic
regarding the runtime crypto library.
If you need a non-compliant library you must create your backend following some
rules and configuring the plugin.

The logic of the EST client is written in the 
    src/lib 
folder but, to invoke the provided client with a backend, you need some additional operations, such as parse 
authentication certificates, parse certificate output result and other.

A new backend need to expose and implement ALL function definitions located in the header
file 
    src/lib/include/rfc7030.h

    ** Note: an example for OpenSSL is located in src/openssl/openssl_rfc.c

4.1. Function map
-----------------
The core of the backend plugin is the config function map. Basically, is a set of function
pointers used by the EST core library to invoke implementation-specific functions.

Two different maps are required:
- ESTTLSInterface_t:    used to invoke TLS specific functions, such as init TLS channel and read/write bytes.
- ESTX509Interface_t:   used to parse, decode and encode specific X.509 objects such as 
                        Certificates, Store, PKCS7 formats.

These maps MUST be configured by the backend (for example see the src/openssl/openssl_rfc.c file) and ALL 
function MUST be implemented. There aren't optional functions.

4.2. Example
------------
For example, you want to add a myssl library implementation:
- Create new folder:

    src/myssl

- Create new file:

    src/myssl/myssl_rfc.c

    ** Note: this file must implement all functions definitions:
        - rfc7030_init
        - rfc7030_get_config
        - rfc7030_request_cachain
        - rfc7030_request_certificate
        - rfc7030_renew_certificate

- Create new cmake file:

    src/myssl/myssl_est_client_library.cmake

    This file must expose all headers and source files required by the backend implementation.
    An example is src/openssl/ossl_est_client_library.cmake.

- Add the library to the src/CMakeLists.txt file:
  Please remember to add a new cmake option (disabled by default) to enable/disable the new backend. For this example could be

    OPTION(USE_MYSSL "Compile using myssl backend" OFF)

    ** Note: search in the file for the ### BEGIN OPENSSL SECTION
             and replicate the OpenSSL section as example.

- Prepare cmake with flags:

    cmake -Ssrc -Bbuild -DUSE_MYSSL=ON -DUSE_OPENSSL=OFF

- Build the code:

    cd build
    make

- Run unit tests:
    
    ./bin/rfc7030-est-client-tests

- Run integration tests:

    ./bin/rfc7030-est-integration-tests


5. Usage
--------
Due to the generic nature of this EST implementation, you have the freedom to choose the 
type of usage you want.

You can compile the project and generate the command line client, you can build your 
own client logic using another backend or you can use the low level library and build 
you entire client from scratch.
In addition you can use the current client logic without all "cli" feature importing the code
in your project.

5.1. Client
-----------
Located in the src/client directory, this is a command line interface client.
You can run
    
    ./rfc7030_est_client -h

to view the list of input parameters.

5.1.1 Example
-------------
With the client you can run three main operations:
- CACerts

    This command request to the EST server the list of CA certificates. 
    No authentication is required here.

    ./rfc7030-est-client -s testrfc7030.com \
        -p 8443 \
        --server-chain dstcax3.pem \
        --output cachain.pem \
        cacerts

- Enroll

    This command request to the EST Server the emission of a certificate 
    providing a local csr (p10) file in PEM format.
    Here we need authentication:

    - Basic Auth

        ./rfc7030-est-client -s testrfc7030.com \
            -p 8443 \
            --server-chain dstcax3.pem \
            --csr req.p10 \
            --basic-auth "estuser:estpwd" \
            --output-ca cachain.pem \
            --output-crt enrolled.pem \
            enroll

    - TLS Auth

        ./rfc7030-est-client -s testrfc7030.com \
            -p 9443 \
            --server-chain dstcax3.pem \
            --csr req.p10 \
            --p12 preenrollment.p12 \
            --p12-password "12345" \
            --output-ca cachain.pem \
            --output-crt enrolled.pem \
            enroll

- Renew

    This command request to the EST Server the emission of a certificate 
    that renews an old one providing a local csr (p10) file in PEM format
    and the old certificate (and its key) in P12.

    The syntax of the command is the same as the Enroll changing the p12 file
    and the last command renew.


5.2. Library
------------
5.3. Custom library
-------------------