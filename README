Library and client implementation of EST Enrollment Protocol RFC 7030 
https://www.rfc-editor.org/rfc/rfc7030.html


Summary
-------

1. Why another EST Client
2. EST Endpoints
3. Build
    3.1 Linux


1. Why another EST Client
-------------------------
Actually, the standard reference implementation https://github.com/cisco/libest
is very complex (Android support, BRSKI support, ...).
Another problem with libest is the OpenSSL library used to implements 
all crypto capabilities because is the only supported library and the 
references are scattered in the code so is't easy to port to another library.

In the IoT world, we have devices with different SSL libraries (e.g. WolfSSL, BoringSSL, MbedTLS...) 
or different platforms that needs non-standard compilation methods or build chainsd 
(e.g. FreeRTOS and some market PLCs).

To support different platforms and libraries we need a 'pluggable' and configurable client.


2. EST Endpoints
----------------
    /cacerts            IMPLEMENTED
    /simpleenroll       IMPLEMENTED
    /simplereenroll     IMPLEMENTED
    /fullcmc            IMPLEMENTED
    /csrattrs           IMPLEMENTED


3. Build
--------
Dependencies:
- cmake

3.1 Linux
---------
- Setup cmake artifacts
  If you want to change the build output directory update the -B flag.

    cmake -Ssrc -Bbuild

- Compile the code
    
    cd build
    make

    ** Note: at the end you will find the artifact build/rfc7030-est-client 

- Run unit tests
    
    ./bin/rfc7030-est-client-tests

- Run integration tests

    ./bin/rfc7030-est-integration-tests


